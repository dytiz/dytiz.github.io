{"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-17","excerpt":""},{"title":"关于我","text":"####关于我从前我可是有理想的小青年啊，怎么就变成以前了呢？ 待完善哈~~~","path":"about/index.html","date":"01-07","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-17","excerpt":""}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment refer:How12hello,world!![name](path)","path":"2019/03/21/hello-world/","date":"03-21","excerpt":""},{"title":"smail语法","text":"语法Dalvik字节码有两种类型，原始类型和引用类型。 原始数据类型 V : void Z : boolean B : byte S : short C : char I : int J : long F : float D : double","path":"2019/03/21/smail语法/","date":"03-21","excerpt":"","preview":"http://img01.jituwang.com/171030/256786-1G03022014656.jpg"},{"title":"线性表","text":"写作本想着不以做笔记为目的，通过学习理解，加自我改造的心得做记录。本打算这周直接上一篇二叉树的但是这周复习和实现线性表，栈队列的时间较多，就只能把二叉树的任务推迟到下周了，那就写一篇具有代表性的线性表吧！ 从名字就可以知道，这是一种像线一样的表，例如车站内排队买车票的人，学校食堂排队打饭的学生，他们都是一个排着一个，如同一根线串起来，组成的一条队列就是线性表。线性表是数据结构中最常用且最简单的一种结构，它是由零个或多个数据元素的有限序列. 线性表按物理结构划分为顺序存储和链式存储。顺序存储：用一段地址连续的存储单元依次存储线性表的数据元素。线性表的数据结构： class SQList{ int []data = new int[MAX]; int length; } 初始化一个成员变量list,在线性表的某个位置插入值： public boolean insert(int pos,int value) { SQList tempList = list; if(pos &lt; 0) { return false; } //先比较，确定位置 int inserPosition = pos; for(int i=list.length-1;i &gt; inserPosition;i--) { list.data[i+1] = list.data[i];//最后一个往后移 } list.data[inserPosition] = value; list.length++; return true; } 按顺序插入： public void insert(int value) { int inserPosition = -1; for(int i =0;i&lt;list.length;i++) { if(value &lt;= list.data[i]) { inserPosition = i; break; } //遍历完还没有小的就放最后面 if(i == list.length-1 &amp;&amp; inserPosition ==-1) { inserPosition = list.length; } } for(int i=list.length-1;i &gt;= inserPosition;i--) { list.data[i+1] = list.data[i];//最后一个往后移 } list.data[inserPosition] = value; list.length++; } 删除操作： public int delete(int pos) { if(pos &lt; 0 || pos &gt; list.length) { return -1; } int value = list.data[pos]; for(int i=pos;i&lt;list.length;i++) { list.data[i] = list.data[i+1]; } list.length--; return value; } 以上简化了异常流程，重点突出线性表的增删，基本上就是对数组的操作，顺序存储的优点是查找方便，通过下标直接返回其值，而插入删除需要移动大量的元素，较为不便，那么有没有更加方便插入与删除的方式呢？下面来介绍增删方便的链表结构： 链表是由一个或若干结点组成的结构，每个结点由数据域与指针域组成。每个结点只包含一个指针，称之为单链表，单链表的第一个结点的存储位置叫做头指针。有时为了操作方便，我们在链表的头部设置一个结点，称之为头结点。结点的结构： class Node{ Object data; Node next; } 默认新建一个头结点head指向链表的头部，在结点的头部插入数据： public void insertHead(Object data) { Node newNode = new Node(data); if(head == null) { head = newNode; }else { newNode.next = head; head = newNode; } } 然后在结点的尾部插入： public void insertFoot(Object data) { Node newNode = new Node(data); if(head == null) { head = newNode; }else { Node temp = head; while(temp.next !=null) { temp = temp.next; } temp.next = newNode; } } 头部的删除很简单哟，虽然写的很粗俗： public void deleteHead() { if(head == null) { return ; } head = head.next; } 尾部的删除： public void deleteFoot() { Node temp = head; Node pre = head; while(temp.next!=null) { pre = temp; temp = temp.next; } pre.next = null; } 获取链表的第i个数据，感觉多此一举： public Object getData(int i){ if(i &lt; 0) return -1 ; int j = 0; Node temp = head; while(j &lt; i &amp;&amp; temp.next != null) { temp = temp.next; j++; } return temp.data; } ok,单链表的操作大致就这样。以后还有什么错的，待补充的再补上。 今日，美国以叙利亚化学武器袭击事件为由进行军事打击，而在今天上午美英法三国对叙利亚的空袭成真,表面上的“化武袭击”，但时至今日也没拿出直接证明是巴沙尔政权所为，发起战争的理由好像挺复杂的，但作为一个吃瓜群众，我们希望的是世界和平。。。","path":"2018/04/15/线性表/","date":"04-15","excerpt":"","preview":"http://p.ananas.chaoxing.com/star/733_434c/1389782336880voplp.png"},{"title":"新起点，新起航","text":"当一个普通的程序员时间久了，就会越迷茫越空虚，新的技术层出不穷，老的技术点没吃透，立志想成为人人敬仰的技术大牛，却不知从何开始。 于是我开始思考一个新入门的程序员和一位资深程序员的区别。最表面的就是资深程序员好像可以解决一切问题，深层次一点就是会多少多少门编程语言，数据结构算法很厉害，会什么框架架构等等。然而一个人的时间精力都是有限的，那么如何在有限的时间里，学会更多的知识，更深的技术呢？这就需要我们透过现象看本质，找到真正能提升自己的核心。 我们都知道编程语言都是有通用性的。当你已经熟练使用一门语言，那么如果要去学一门新的语言，对你来说肯定不是难事，所以我们不必花费大量的时间去学习各种编程语言。 在数据结构概论中，我们学习到程序=数据结构+算法，由此可见数据结构与算法对于一个程序员的重要性。只要涉及到软件程序就会数据结构，算法。如果这块不熟练的话，有必要花时间去掌握。 在日常工作中，当我们需要实现一个原生系统没有的组件，或者实现方式，那么我们通常的做法是在github找一个框架，使用现成的或者改一改就能应付日常工作了。如果修改仍然达不到需求想要的效果，那怎么办？到此就需要自己动手丰衣足食了，这也是提升核心竞争力(逼格)的一个要点，首先找几个有代表性的框架，精读源码。总结其中的规律和方法，仿照实践，以此来提升。 除上所诉，我认为逻辑思维跟语言组织表达能力很重要。同样一个功能，大神跟菜鸟实现的方式是截然不同的，我们需要做的就是不断的学习，思考，练习。 从今天开始，从数据结构开始，坚持写作。","path":"2018/04/07/新起点，新起航/","date":"04-07","excerpt":"","preview":"http://p2.so.qhimgs1.com/t0102141402d650ef1e.jpg"}]}