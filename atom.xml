<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小浩有个小小理想</title>
  
  <subtitle>Love what you do,Keeping looking,and Dont settle!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wuhao.me/"/>
  <updated>2018-04-19T14:45:33.000Z</updated>
  <id>http://www.wuhao.me/</id>
  
  <author>
    <name>wuhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>android简单搭建后台</title>
    <link href="http://www.wuhao.me/2018/04/19/android%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E5%90%8E%E5%8F%B0/"/>
    <id>http://www.wuhao.me/2018/04/19/android简单搭建后台/</id>
    <published>2018-04-19T05:10:24.000Z</published>
    <updated>2018-04-19T14:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>距离高考还有48天，希望每一位考生能积极备战，挥洒热血,勇于冲刺，超常发挥，进入自己理想中的大学！！！</p><p>作为一名移动端开发者，主要负责的工作是对手机界面数据的展示以及交互，很少会设计到复杂，重要的业务逻辑，而这部份都是交由后台开发来处理，这样就能让手机更专注于其该做的事。</p><p>做移动开发的时间也不端了，其实一直盼着自己能写接口给自己调用，也一直被这样那样的事所耽误。直到今天，我终于能静下心来实现这个小小的理想了。话不多说，扎起袖子开干！</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h3 id="安装JDK-配置环境变量"><a href="#安装JDK-配置环境变量" class="headerlink" title="安装JDK,配置环境变量"></a>安装JDK,配置环境变量</h3><p>访问<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">ORACLE官网</a> 下载对应版本的JDK.</p><p>####配置JDK环境变量<br>$:cd ~<br>$:vim .bashrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=~/Library/Java/jdk1.8.0_40.jdk/Contents/Home</div><div class="line">PATH=$JAVA_HOME/bin:$PATH:.</div><div class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</div><div class="line">export JAVA_HOME</div><div class="line">export PATH</div><div class="line">export CLASSPATH</div></pre></td></tr></table></figure><h3 id="Tomcat的配置"><a href="#Tomcat的配置" class="headerlink" title="Tomcat的配置"></a>Tomcat的配置</h3><p>打开 <a href="http://tomcat.apache.org/index.html" target="_blank" rel="external">Apache Tomcat</a>,选择一个Tomcal版本，下载core包(mac下载zip或tar.gz)<br><img src="/2018/04/19/android简单搭建后台/tomcat_capture.png" alt="哈哈"></p><p>解压tomcat包到~/Library/,然后进入~/Library/apache-tomcat-8.5.30/bin,启动Tomcat:<br>$./startup.sh</p><p>出现./startup.sh: Permission denied，则需要授予执行权限:<br>$:chomd u+x *.sh<br>然后重新执行./startup.sh 启动Tomcat,提示Tomcat started.则表示启动成功。</p><p>打开浏览器输入<code>http://localhost:8080</code>进行验证，出现如下页面则表示服务已经在运行。<br><img src="/2018/04/19/android简单搭建后台/tomcat_started.png" alt="启动"></p><h3 id="eclipse下载"><a href="#eclipse下载" class="headerlink" title="eclipse下载"></a>eclipse下载</h3><p> 进入<a href="https://www.eclipse.org/downloads/eclipse-packages/" target="_blank" rel="external">eclipse官网</a>,选择IDE for Java EE Development下载安装.</p><h3 id="新建Java工程"><a href="#新建Java工程" class="headerlink" title="新建Java工程"></a>新建Java工程</h3><p>打开eclipse-&gt;File-&gt;New-&gt;Project,在Web下选择Dynamic Web Project<br><img src="/2018/04/19/android简单搭建后台/selectWizard.png" alt="wizard"><br>选择next<br><img src="/2018/04/19/android简单搭建后台/newProject.png" alt="project"><br>一直next,最后finish完成新建.</p><h4 id="创建servlet"><a href="#创建servlet" class="headerlink" title="创建servlet"></a>创建servlet</h4><p>什么是servlet?<br> servlet是一个用来接收前端请求，响应前端请求的一个服务端程序，或称服务连接器。</p><p> 接下来新建一个servlet。<br> 首先在工程的java Resources的src下new一个Servlet,输入包名，类名，继承自HttpServlet类.<br> <img src="/2018/04/19/android简单搭建后台/createServlet.png" alt="servlet"><br>选择next<br> <img src="/2018/04/19/android简单搭建后台/getmethod.png" alt="servlet"><br>点击finish，就完成了servlet的创建。这里我们可以看到默认实现了两个方法doGet和doPost。根据方法名就能知道这是get请求和post请求回调的方法。在doGet方法中加入如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">response.setContentType(&quot;text/html&quot;);</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line">out.println(&quot;&#123;\&quot;result\&quot;:\&quot;success\&quot;&#125;&quot;);</div><div class="line">out.flush();</div><div class="line">out.close();</div></pre></td></tr></table></figure><p>接下来找到WebContent-&gt;WEB_INF-&gt;web.xml文件,在web-app结点下增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">&lt;description&gt;this is a description&lt;/description&gt;</div><div class="line">&lt;servlet-name&gt;ServletDemo&lt;/servlet-name&gt;</div><div class="line">&lt;servlet-class&gt;com.demo.ServletDemo&lt;/servlet-class&gt;</div><div class="line">&lt;/servlet&gt;</div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">&lt;servlet-name&gt;ServletDemo&lt;/servlet-name&gt;</div><div class="line">&lt;url-pattern&gt;/servlet/ServletDemo&lt;/url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure><p> 以上就增加了一个servlet并关联了一个映射，接下就可以启动服务器访问servlet了。<br>右击工程-&gt;Run As -&gt; Run On Server:<br><img src="/2018/04/19/android简单搭建后台/runOnServer.png" alt="runServer"><br>next,添加工程到configured，选中finish.服务就启动了.<br>在打开浏览器输入<code>http://localhost:8080/HelloWorld/servlet/ServletDemo</code> 就可以访问doGet方法中写入response的会返回结果了。</p><p>但是我压根就不想用servlet呀，那就写个网页吧!</p><p>在WebContent下新建一个html，在body中输入任意字符用以识别。<br>然后在web.xml的web-app结点下进行如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;welcome-file-list&gt;</div><div class="line"> &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class="line"> &lt;/welcome-file-list&gt;</div></pre></td></tr></table></figure></p><p>然后在地址栏输入<code>http://localhost:8080/HelloWorld/index.html</code> </p><p>居然出现404，what? 地址找不到? 不是在web.xml都进行了配置了吗? 然后疯狂baidu，然未果，404出现的情况太多了，问大佬才知道java path有问题.</p><p>右击工程-&gt;Build Path -&gt; Configure Build Path:<br>Default output folder : 工程/build/classes</p><p>在 工程/WebContent/Web-INF/下创建classes文件夹， Browse选择classes文件.<br><img src="/2018/04/19/android简单搭建后台/buildPath.png" alt="runServer"><br> 在地址栏输入<code>http://localhost:8080/HelloWorld/index.html</code>，成功! </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;距离高考还有48天，希望每一位考生能积极备战，挥洒热血,勇于冲刺，超常发挥，进入自己理想中的大学！！！&lt;/p&gt;
&lt;p&gt;作为一名移动端开发者，
      
    
    </summary>
    
    
      <category term="环境搭建" scheme="http://www.wuhao.me/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://www.wuhao.me/2018/04/15/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://www.wuhao.me/2018/04/15/线性表/</id>
    <published>2018-04-15T13:49:57.000Z</published>
    <updated>2018-04-15T15:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>写作本想着不以做笔记为目的，通过学习理解，加自我改造的心得做记录。本打算这周直接上一篇二叉树的但是这周复习和实现线性表，栈队列的时间较多，就只能把二叉树的任务推迟到下周了，那就写一篇具有代表性的线性表吧！ </p><p>从名字就可以知道，这是一种像线一样的表，例如车站内排队买车票的人，学校食堂排队打饭的学生，他们都是一个排着一个，如同一根线串起来，组成的一条队列就是线性表。线性表是数据结构中最常用且最简单的一种结构，它是由零个或多个数据元素的有限序列.</p><p>线性表按物理结构划分为顺序存储和链式存储。<br>顺序存储：用一段地址连续的存储单元依次存储线性表的数据元素。<br>线性表的数据结构：</p><pre><code>class SQList{    int  []data = new int[MAX];    int length;}</code></pre><p>初始化一个成员变量list,在线性表的某个位置插入值：</p><pre><code>public boolean insert(int pos,int value) {    SQList tempList = list;    if(pos &lt; 0) {        return false;    }    //先比较，确定位置    int inserPosition = pos;    for(int i=list.length-1;i &gt; inserPosition;i--) {        list.data[i+1] = list.data[i];//最后一个往后移    }    list.data[inserPosition] = value;    list.length++;    return true;}</code></pre><p>按顺序插入：</p><pre><code>public void insert(int value) {    int inserPosition = -1;    for(int i =0;i&lt;list.length;i++) {        if(value &lt;= list.data[i]) {            inserPosition = i;            break;        }        //遍历完还没有小的就放最后面        if(i == list.length-1 &amp;&amp; inserPosition ==-1) {            inserPosition = list.length;        }    }    for(int i=list.length-1;i &gt;= inserPosition;i--) {        list.data[i+1] = list.data[i];//最后一个往后移    }    list.data[inserPosition] = value;    list.length++;}</code></pre><p>删除操作：</p><pre><code>public int delete(int pos) {    if(pos &lt; 0 || pos &gt; list.length) {        return -1;    }    int value = list.data[pos];    for(int i=pos;i&lt;list.length;i++) {        list.data[i] = list.data[i+1];    }    list.length--;    return value;}</code></pre><p>以上简化了异常流程，重点突出线性表的增删，基本上就是对数组的操作，顺序存储的优点是查找方便，通过下标直接返回其值，而插入删除需要移动大量的元素，较为不便，那么有没有更加方便插入与删除的方式呢？下面来介绍增删方便的链表结构：</p><p>链表是由一个或若干结点组成的结构，每个结点由数据域与指针域组成。每个结点只包含一个指针，称之为单链表，单链表的第一个结点的存储位置叫做头指针。有时为了操作方便，我们在链表的头部设置一个结点，称之为头结点。<br>结点的结构：</p><pre><code>class Node{     Object data;     Node next; }</code></pre><p>默认新建一个头结点head指向链表的头部，在结点的头部插入数据：</p><pre><code>public void insertHead(Object data) {    Node newNode = new Node(data);    if(head == null) {        head = newNode;    }else {        newNode.next = head;        head = newNode;    }}</code></pre><p>然后在结点的尾部插入：</p><pre><code>public void insertFoot(Object data) {    Node newNode = new Node(data);    if(head == null) {        head = newNode;    }else {        Node temp = head;        while(temp.next !=null) {            temp = temp.next;        }        temp.next = newNode;    }}</code></pre><p>头部的删除很简单哟，虽然写的很粗俗：</p><pre><code>public void deleteHead() {    if(head == null) {        return ;    }    head  = head.next;}</code></pre><p>尾部的删除：</p><pre><code>public void deleteFoot() {    Node temp = head;    Node pre = head;    while(temp.next!=null) {        pre = temp;        temp = temp.next;    }    pre.next = null;}</code></pre><p>获取链表的第i个数据，感觉多此一举：</p><pre><code>public Object getData(int i){    if(i &lt; 0)        return -1 ;    int j = 0;    Node temp = head;    while(j &lt; i &amp;&amp; temp.next != null) {        temp = temp.next;        j++;    }    return temp.data;    }</code></pre><p>ok,单链表的操作大致就这样。以后还有什么错的，待补充的再补上。</p><p>今日，美国以叙利亚化学武器袭击事件为由进行军事打击，而在今天上午美英法三国对叙利亚的空袭成真,表面上的“化武袭击”，但时至今日也没拿出直接证明是巴沙尔政权所为，发起战争的理由好像挺复杂的，但作为一个吃瓜群众，我们希望的是世界和平。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写作本想着不以做笔记为目的，通过学习理解，加自我改造的心得做记录。本打算这周直接上一篇二叉树的但是这周复习和实现线性表，栈队列的时间较多，就只能把二叉树的任务推迟到下周了，那就写一篇具有代表性的线性表吧！ &lt;/p&gt;
&lt;p&gt;从名字就可以知道，这是一种像线一样的表，例如车站内排
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.wuhao.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>新起点，新起航</title>
    <link href="http://www.wuhao.me/2018/04/07/%E6%96%B0%E8%B5%B7%E7%82%B9%EF%BC%8C%E6%96%B0%E8%B5%B7%E8%88%AA/"/>
    <id>http://www.wuhao.me/2018/04/07/新起点，新起航/</id>
    <published>2018-04-07T15:26:22.000Z</published>
    <updated>2018-04-08T16:11:19.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>当一个普通的程序员时间久了，就会越迷茫越空虚，新的技术层出不穷，老的技术点没吃透，立志想成为人人敬仰的技术大牛，却不知从何开始。于是我开始思考一个新入门的程序员和一位资深程序员的区别。最表面的就是资深程序员好像可以解决一切问题，深层次一点就是会多少多少门编程语言，数据结构算法很厉害，会什么框架架构等等。然而一个人的时间精力都是有限的，那么如何在有限的时间里，学会更多的知识，更深的技术呢？这就需要我们透过现象看本质，找到真正能提升自己的核心。我们都知道编程语言都是有通用性的。当你已经熟练使用一门语言，那么如果要去学一门新的语言，对你来说肯定不是难事，所以我们不必花费大量的时间去学习各种编程语言。在数据结构概论中，我们学习到程序=数据结构+算法，由此可见数据结构与算法对于一个程序员的重要性。只要涉及到软件程序就会数据结构，算法。如果这块不熟练的话，有必要花时间去掌握。在日常工作中，当我们需要实现一个原生系统没有的组件，或者实现方式，那么我们通常的做法是在github找一个框架，使用现成的或者改一改就能应付日常工作了。如果修改仍然达不到需求想要的效果，那怎么办？到此就需要自己动手丰衣足食了，这也是提升核心竞争力(逼格)的一个要点，首先找几个有代表性的框架，精读源码。总结其中的规律和方法，仿照实践，以此来提升。除上所诉，我认为逻辑思维跟语言组织表达能力很重要。同样一个功能，大神跟菜鸟实现的方式是截然不同的，我们需要做的就是不断的学习，思考，练习。从今天开始，从数据结构开始，坚持写作。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;当一个普通的程序员时间久了，就会越迷茫越空虚，新的技术层出不穷，老的技术点没吃透，立志想成为人人敬仰的技术大牛，却不知从何开始。
于是我开始思考一个新入门的程序员和一位资深程序员的区别。最表面的就是资深程序员好像可以解决一切问题，深层次一点就是会多少多少门编
      
    
    </summary>
    
    
      <category term="日志" scheme="http://www.wuhao.me/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.wuhao.me/2017/07/20/hello-world/"/>
    <id>http://www.wuhao.me/2017/07/20/hello-world/</id>
    <published>2017-07-20T02:58:27.000Z</published>
    <updated>2017-07-20T02:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
